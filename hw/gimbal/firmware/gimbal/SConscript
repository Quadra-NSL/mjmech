# Copyright 2015 Josh Pieper, jjp@pobox.com.  All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

Import('hostenv')
Import('targetenv')
Import('libcmsis')
Import('libhal')
Import('libmiddlewares')
Import('libmiddlewares_include')
Import('libsrc')

env = targetenv.Clone()
env.Append(CXXFLAGS=['-Wno-unused-local-typedefs'])
env.Append(CPPPATH=libmiddlewares_include)

SOURCES = [
    'as5048_driver.cc',
    'bldc_encoder.cc',
    'bmi160_driver.cc',
    'command_manager.cc',
    'cpp_gimbal.cc',
    'fire_control.cc',
    'gimbal.c',
    'gimbal_herkulex_operations.cc',
    'gimbal_stabilizer.cc',
    'herkulex_protocol.cc',
    'lock_manager.cc',
    'mahony_imu.cc',
    'persistent_config.cc',
    'pool_ptr.cc',
    'stm32_analog_sampler.cc',
    'stm32_bldc_pwm.cc',
    'stm32_crc.cc',
    'stm32_flash.cc',
    'stm32_hal_i2c.cc',
    'stm32_hal_spi.cc',
    'stm32_raw_i2c.cc',
    'system_info.cc',
    'telemetry_manager.cc',
    'uart_stream.cc',
    'usb_cdc_stream.cc',
    ]

HOST_SOURCES = list(set(SOURCES) - set([
            'cpp_gimbal.cc',
            'gimbal.c',
            'stm32_analog_sampler.cc',
            'stm32_bldc_pwm.cc',
            'stm32_crc.cc',
            'stm32_flash.cc',
            'stm32_hal_i2c.cc',
            'stm32_hal_spi.cc',
            'stm32_raw_i2c.cc',
            'system_info.cc',
            'uart_stream.cc',
            'usb_cdc_stream.cc',
        ]))

raw_env = env.Clone()
raw_env.Append(CFLAGS=['-O0', '-Wno-unused-but-set-variable'])
raw_objs = raw_env.Object(['hardfault.s', 'hardfault_handler.c'])

target = env.Program(
    'gimbal', raw_objs + libcmsis + SOURCES + libsrc + libmiddlewares + libhal)
env.Depends(target, '#/stm32f411.ld')

env.Default(target)

flash1 = env.Command(
    'gimbal.flash1.bin', target,
    '$OBJCOPY -Obinary -j .isr_vector $SOURCE $TARGET')
flash2 = env.Command(
    'gimbal.flash2.bin', target,
    '$OBJCOPY -Obinary -j .text -j .ARM.extab -j .ARM -j .preinit_array -j .init_array -j .fini_array -j .data $SOURCE $TARGET')

do_flash = env.Command(
    'flash-stamp', flash1 + flash2,
    '$FLASH write ${SOURCES[0]} 0x8000000 && ' +
    '$FLASH write ${SOURCES[1]} 0x8020000')

env.Alias('flash', do_flash)

TESTS = ['test/' + x for x in [
        'as5048_driver_test.cc',
        'bmi160_driver_test.cc',
        'command_manager_test.cc',
        'crc_test.cc',
        'fire_control_test.cc',
        'gimbal_stabilizer_test.cc',
        'herkulex_protocol_test.cc',
        'lock_manager_test.cc',
        'mahony_imu_test.cc',
        'persistent_config_test.cc',
        'pool_ptr_test.cc',
        'static_function_test.cc',
        'telemetry_manager_test.cc',
        'test_main.cc',
        'tokenizer_test.cc',
        ]]

testenv = hostenv.Clone()
testenv.Append(LIBS=['boost_unit_test_framework'])
testenv.Append(CXXFLAGS=[
    '-Wno-unused-local-typedefs',
    '-Wno-deprecated-declarations',
    '-Wno-sign-compare',
])
testenv['OBJPREFIX'] = 'tst_'

test_gimbal = testenv.Program('test_gimbal', HOST_SOURCES + TESTS)
test_command = testenv.Command('test_gimbal.passed', test_gimbal,
                               '$SOURCE && touch $TARGET')

env.Default(test_command)
