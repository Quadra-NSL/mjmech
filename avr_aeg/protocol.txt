Firmware Protocol

= General =

The controller appears as a CDC class serial port, at /dev/ACM?.  It
can be opened at any speed, and DTR should be activated.

= Protocol =

The protocol is line based.  Data to the controller should be
terminated with either a '\r' or '\n', data from the controller is
terminated with "\n".  Empty lines are silently ignored.  All
arguments are hexidecimal unless stated otherwise.

The host may send commands.  Responses to host initiated commands
start with a '<' character, followed by the 3 letter command prefix,
or "ERR" if the command was not parsed successfully.

>>> "PNG\n"
<<< "<PNG OK\n"
>>> "BLH\n"
<<< "<ERR Bad command\n"

The controller may send asynchronous notifications at any time.  They
start with the '!' character.

<<< "!GNR TIMEOUT\n"

When the port is first opened, the controller sends a welcome message:
<<< "!GNR WELCOME arr-firmware v0.1\n"

= Commands =

== General ==

Command: PNG
Example: "PNG\n"
Response: "<PNG ACK\n"

Query controller live-ness.


Command: STB stream_id rate message_code (extra_args)
Example: "STB 03 0a00 SVI\n"
Response: "<STB OK\n"
(later): "!STM 03 SVI 0040 0040 0040 0040 0040 0040 0040 0040\n"

Request that the given response be streamed repeatedly.
  stream_id - a unique hex identifier for this stream
  rate - a 4 digit hex value in milliseconds
  message_code - a three letter message identifier
  (extra_args) - optional addition arguments as passed to message

The controller will emit spontaneous messages for that code as they
are generated at the specified period, or the natural period,
whichever is slower.  If the code is not streamable, "ERR" will be
returned instead of "OK".  The spontaneous messages will be prefixed
with "STM" and the 8 bit hexadecimal stream identifier used when the
stream was created.  Stream IDs are limited to values between 1 and
15.


Command: STE XX code
Example: "STE 01 SVI\n"
Response: "<STE OK\n"

Request that the given stream be ended.  Both the stream identifier
and code must match.


Command: STL
Example: "STL\n"
Response: "<STL 0005\n"

"List" the current active streams.  Return a bitmask indicating which
stream IDs are currently active.


Command: STG XX
Example: "STG 01\n"
Response: "<STG 01 0a00 SVI\n"

"Get" the current command associated with a stream ID.  An error will
be returned if the stream ID is not active.


Command: TMQ
Example: "TMQ\n"
Response: "<TMQ 2a1e\n"

Query the current time.  Returns a 16 bit hexadecimal number
representing the current time in milliseconds mod 0xffff.


Command: PRF
Example: "PRF\n"
Response: "<PRF 0001\n"

Query the current performance counter.  It reports the average number
of main loop iterations executed per millisecond * 8.


Command: VER
Example: "VER\n"
Response: "<VER arr-firmware v0.1\n"

Query the current firmware version.  Returns an unstructured string
which may include spaces.


Command: RST
Example: "RST\n"
Response: None

Restart the firmware and reset to power on state.  Note, this will
likely cause the USB communications device to "go away" briefly while
the host re-negotiates a connection.


Command: BOT
Example: "BOT\n"
Response: None

Enter the bootloader.  Serial communications will halt, and the device
will re-appear on the USB bus as the appropriate bootloader device.


Command: QER
Example: "QER\n"
Response: "<QER 0000\n"

Query and clear the current error flag status.  The following flags
are defined:

  Bit  Name
  ?    ?


Command: QGR XXXX
Example: "QGR eva0a1\n"
Response: "<QGR e0010 v01 a01201 a10890\n"

Query one or more general purpose scalar values.  The argument is a
string consisting of individual 1 or 2 character flags.

 't' - current TMQ value - 16 bits
 'e' - the ENC value - 16 bits
 'v' - the SSV value - 8 bits
 'aN' - one of the ADC channels - 16 bits
 'pN' - one of the GPIO ports - 8 bits
 'iN' - one of the SVI values - 16 bits
 'oN' - one of the SVO values - 16 bits
 'f' - the PRF value - 16 bits
 'r' - the QER value - 16 bits
 'l' - the STL value - 16 bits
 'm' - the SVM value - 16 bits

The response has each element prefixed with its code, with the
elements separated by spaces.  The overall response line may be no
more than 80 characters, although depending upon the exact sequence of
characters the limit may be less.  If an overflow or faulty string is
encountered, the valid results up until that point are emitted, and
any streaming is stopped.


Command: WDT
Example: "WDT\n"
Response: None

Exercise the watchdog timer by entering an infinite loop.


Command: WPC
Example: "WPC\n"
Response: "<WPC 06E4\n"

Return the program counter observed during the last watchdog system
reset.

== I2C ==

Command: I2C command
Example: "I2C s21w2ar02\n"
Response: "<I2C OK 3A11\n"

Perform a simple I2C transaction, return received data immediately.

Commands are interpreted character by character, with 2X meaning 2
hexadecimal digits.
  'a'..'f' -- reserved for hex digits
  ' ', ':' -- ignored
  'r' 2X -- read the given number of bytes from the device
  's' 2X -- set slave address for next command (must be first)
  'w' [2X]*n -- send given data to device
  'p' MM XX -- must follow 'r', let 'val' be last byte read:
      Then if (val & MM) != (XX & MM), stop executing the program
      Useful to check status bytes
  ';' -- send STOP condition (happens automatically at end of command)

Success responses will start with "OK" followed by any data that was
read.  Error responses will start with "ERR", followed by a textual
error description.

== GPIO ==

Command: GPQ
Example: "GPQ\n"
Response: "<GPQ 00 00 00 00 00 00\n"

Query the current state of all 6 GPIO ports.  This returns 6 hex
numbers, which correspond to PINA -> PINF


Command: GPC port bit value
Example: "GPC A 0 1\n"
Response "<GPC OK\n"

Set a single GPIO bit.  This will only work with certain free ports.
Others will return an error.


Command: ADC channel
Example: "ADC 1\n"
Response: "<ADC 1 0152\n"

Sample analog channel 0-7.  Returns a single 16 bit hex number
corresponding to the sampled analog voltage.  0=0V, 1023=2.56


Command: ENC
Example: "ENC\n"
Response: "<ENC 3a50\n"

Read the encoder value.  PIND2 and PIND3 are interpreted as a
quadrature encoder.  Changes on these pins are integrated into an
internal 16 bit counter.  This command reads that counter.

== PWM ==

Command: PWM channel duty length_ms
Example: "PWM 0 200 300\n"
Response: "<PWM OK\n"

Emit a PWM pulse of a given duty cycle and length on the desired
channel.  Both 'duty' and 'length_ms' are input in hex.  'duty' is
specified between 0 and 3e8 (0-1000 decimal).  Length is between 0 and
ffff (0ms and 65.535s).  Channel is either 0, 1, or 2, corresponding
to B5, B6, or B7.

== Serial ==

Command: SRC baud format
Example: "SRC 115200 8N1H\n"
Response: "<SRC OK\n"

Configure the external asynchronous serial stream.  The baud rate,
character size, parity, and stop bits follows standard formatting
conventions.  The final character is 'H' for half duplex or 'F' for
full duplex.


Command: SRT data
Example: "SRT 68656C6C6F\n"
Response: "<SRT OK\n"

Transmit serial data.  The data itself should be hex encoded.


Spontaneous: !SRD data
Example: "!SRD 7468657265\n"

Spontaneous emitted when asynchronous serial data is received.


Command: SRG
Example: "SRG\n"
Response: "<SRG 9600 8N1F\n"

Retrieve the current serial configuration.
