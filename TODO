 * Make video wifi link more reliable
 * test rpi3 daughterboard
 * mod mammal power board to disconnect/remove servo level translators
 * boot up turret board again, recalibrate the gyro and both motors

 * rpi3 mounting hardware TODO
   * vertical brackets
     * mark out in sketch where gimbal motor interferes with nut
     * don't need to extend backward at all
     * need mounting holes for weapon further forward so top screw
       clears motor
     * front needs bottom clearance for weapon side screws
   * bottom plate
     * needs to be shifted over to let rpi3 swing freely
     * needs mounting holes for camera spaced across front
     * make left side be narrower so pitch gimbal wire could be placed
       on bottom side
     * add longitudinal ridges for increased stiffness
     * mounting holes for rpi3 need to be shifted so it sits further
       forward

   * design front and rear shroud


 * get turret board compiling w/ clang freestanding in bazel

 * lizard robot (and probably mammal), takes too long to turn when
   changing direction or switching to strafing

 * control: make sure we are using multicasts for control commands

 * Logs collection from the robot
 * OSD -- general logging

 * control: deploy/launch script. Must also collect logs, including
   video stats.
 * camera based target stabilization/tracking

Post-Robotgames 2016 brainstorming
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 * Want VGA->5.8GHz TX, so we can broadcast our video to other monitors
 * 5.8GHz recording system, so we can record compeitors video for posterity
 * Make sure our gun is strong enough
 * Targeting panel calibration rig: gun with variable FPS, FPS meter
 * Spare velcro
 * ser2net on odroid, or some other way to run legtool
 * big monitor: next match time, or the current score
 * scoring transponder which does not suck
 * suggest to forum: no-2.4Ghz system
 * suggest to forum: new transponder protocol or system
 * check-in servo manual
 * make sur the procedure to set up new servo is recorded/clear
 * make sure it complains loudly when networkmanager is up
 * simple target panel tester: power + superbright LED with right connector
 * put sharpie (black + white) in the toolkit

Movement
~~~~~~~~

 * Make AHRS actually work
   * Possibly switch to Mahony IMU instead of UKF for easier tuning and stability
 * Switch gait engine to be one that selects foot placements
 * Make tplot be able to 3d render the mech

Video/Control
~~~~~~~~~~~~~

 * Fix raw_frames in VideoDisplay::Stats
 * control: ability to click on screen and start shooting there
 * control: ability to lock on / detect the target
 * video: dynamically control frame parameters, # of retransmissions
 * video: mjpeg mode for times when link is really bad
 * video: forward error correction / network coding
 * general: remove all address smarts from udp_data_link and udp_socket.
   It is perfectly ok (and more predicable) to specify all paramters
   by hand.
 * control: detect if bullet actually went out
 * video: see if we can decrease the camera latency
  - currently ~200mS for H264 on-camera or ~120mS for H264 on-odroid
 * video: ensure --display.source=rtsp:// works
 * fix IMU -- find out the right i2c port

History
~~~~~~~

DONE 2018-07-30
 * Wrote setup script

DONE 2018-07-23
 * Got gimbal building on bionic
 * Upgraded everything to bazel 0.15.1

DONE 2018-07-17
 * Modified brackets to move rpi3 and weapon further forward.  Seems
   to balance relatively well in that position, although you can't put
   a nut on the top weapon bolt

DONE 2018-07-16
 * Verified serial functionality
 * Basic fit check of rpi3 mounting hardware
 * Got rpi3 hat sent off to mfg

DONE 2017-06-26
 * joule camera working
 * all software running on ref-os-iot

DONE 2017-06-12
 * Got root ssh login on joule
 * All deps running on joule

DONE 2016-12-02
 * Verified that UART0 and UART1 work in joule ubuntu, up to 4M baud
   each

DONE 2016-11-10
 * Sent in order for beefier mammal shoulder bracket to 3dhubs after
   emachineshop couldn't do it out of al plate.

DONE 2016-11-06
 * Sent in order for mammal shoulder bracket to emachineshop

DONE 2016-11-05
 * Finalized emachineshop drawing for mammal shoulder bracker

DONE 2016-11-04
 * Mostly recreated mammal bracket in e-machineshop after windows ate
   everything

DONE 2016-03-12
 * Connected up scoring LED board on mammal robot
 * Populated through hole things on spare v3 gimbal board
 * Moved offset config from mw_command into MechWarfare

DONE 2016-03-11
 * ordered competition BBs

DONE 2016-03-10
 * fixed video recording
 * need a way to stop sending commands to robot and to view if it
   thinks the servos have been idled or not
 * OSD -- targeting grid, just fixed in the center to make it easier
   to see where the laser would be

DONE 2016-03-05
 * add button to prevent rotation from happening temporarily
 * implement a minimal simulated turret and enable it by default

DONE 2016-03-04
 * the additional mode buttons appear to apply in parallel with drive mode

DONE 2016-03-03
 * control: make sure agitator control activates occasionally when
   firing somehow

DONE 2016-03-02
 * re-routed USB camera harness on first gimbal to reduce likelihood
   of camera falling off USB bus

DONE 2016-03-01
 * reconnector the lizard scoring harnesses to JST

DONE 2016-02-29:
 * start_robot: option to run without recompiliing
 * fix video recording
 * test lizard robot walking w/ both xbox and logitech joystick
 * test and tune constants for limiting translation when rotating

DONE 2016-02-28
 * control: bring in joystick control code to video_controller_app process.
 * Assemble second weapon
   * add JST connector to second webcam
   * build power/data cable to main chassis
   * build USB cable to main chassis

DONE 2016-02-27
 * Assembled second weapon
 * Started filling up toolbox with parts
   * Ordered more baggies so that I can finish
 * Built weapon to gimbal stabilizer cable
 * Built IMU cable
 * Hot glued laser into place
 * Populated AS5048B board
 * built pitch encoder cable

DONE 2016-02-26
 * Verified that OSD correctly shows voltage and turret
   position... likely the fire time is correct too

DONE 2016-02-25
 * Status reporting from the robot

DONE 2016-02-24
 * finished assembling all 8 target panels

DONE 2016-02-23
 * Mostly assembled 4 .1" target panels
 * Partially assembled 4 JST target panels

DONE 2016-02-22
 * Got lizard chassis operating using the MechWarfare
 * assembled third transponder board and remaining 2 LED boards

DONE 2016-02-14
 * Create gimbal board protective 3D printed cover and ordered from
   shapeways

DONE 2016-02-13
 * designed and ordered new turret gimbal
 * install shapeways barrel lock

DONE 2016-02-11
 * video: ensure --camera.write_video on sender produces playable file
 * video: decrease the latency of the network link / receiver (currently ~200mS)

DONE 2016-02-10
 * video: finish McastVideoLink
  - packetize frames into packets, merge them back
  - send on fixed schedule (but apply corrections if this is too slow)
  - ensure we log all packets

DONE 2016-02-10
 * added eeprom support to herkulex_tool
 * made MechWarfare verify minimum voltage configuration on start
 * recorded full turret config, tuned yaw to have almost no overshoot

DONE 2016-02-08
 * if a servo goes power off, we need to report it in a big way, but
   not automatically re-enable it
 * make turret rate commands able to operate in a fine mode somehow,
   either a gradiated rate scheme, or a toggle for fine mode
 * ordered new versions of weapon plates, jaws, and lizard turret
   mount from emachineshop

DONE 2016-02-07
 * Need to re-calibrate turret gyro any time torque is enabled

DONE 2016-02-03
 * prepared freecad and dxf files for new turret plate, new turret
   jaws, and new lizard turret adaptor

DONE 2016-02-02
 * rev gimbal board and get 2x of the clean version made
 * ordered some nylon spacers to use for "feet" under the bottom body
   plate

DONE 2016-01-31
 * verify that absolute yaw and pitch control work in gimbal


DONE 2016-01-30
 * Update commands for single person operation
   * right stick controls gimbal
   * left stick translates
   * onboard logic tries to keep machine moving in optimal direction
     without obviously moving camera

DONE 2016-01-29
 * Switch turret rate commands to use the onboard rate motion
 * Tune gaits for loaded mech (may need to increase range of joints?)

DONE 2016-01-27
 * Finish testing scoring transponder
 * Mount scoring transponder
 * Mount and wire scoring panels

DONE 2016-01-26
 * mounted savage solder camera and IMU to inside of weapon plate
 * finished populating second scoring transponder, basic power on test

DONE 2016-01-25
 * ordered spare gimbal motors

DONE 2016-01-21
 * Build power/data harness to go from top plate to turret
 * Build USB harness to go from top plate to turret
 * Test mount bottom plate and battery
 * Mostly populated a new transponder board

DONE 2016-01-20
 * gimbal harness rebuilds
   * motor wires
   * weapon wires
   * Build final IMU harness and mount
 * tested BMI160 breakout board on discovery platform

DONE 2016-01-19
 * Ordered second set of 3d printed parts for weapon
 * Drilled holes to mount turret yaw motor on plate and mounted
 * Ordered necessary parts to populate second scoring transponder and
   LED board

DONE 2016-01-18
 * tested translation acceleration limiting... seems to keep it from
   tipping over minus turret at least

DONE 2016-01-17
 * Designed and got quote for panel mount L brackets

DONE 2016-01-14
 * Calling the simulator working enough for now

DONE 2015-03-11:
 * Log stdout/stderr of external processes of vserver


DONE 2015-03-07:
 * Tune turret servoes more for better performance
 * Log turret position even when not in 'inpos firing' mode
 * Better logging while waiting for firing servoes to settle
 * On UI, show desired/actual turret position difference
 * Add an option to manually tweak camera calibration

DONE 2015-03-06:
 * Accelerometer data logger which runs on odroid
 * Log analysis tool which plots accelerometer data, events from ~/.mjmech log
 * Legtool servo settings support
 * Initial turret servo tuning
 * Poll (and send) turret servo actual positions
 * Make 'auto-agitator' mode which runs it only for some interval
   after the shots.
 * UI: Show bullet count (approx.)
 * Better logging: log client-side messages

DONE 2015-03-04:
 * Tried to change .svg file generation to make entries more readable. Have
   a patch which blurs the background -- great effect, but too high of a CPU
   usage

DONE 2015-03-03:
 * Add clear plastic cover above odroid
 * UI: Hide debug-priority messages from OSD (leave on stdout), demote some
   messages to stdout
 * Added skeleton for i2c poller (for accelerometer support)

DONE 2015-03-02:
 * UI: fix reticle #1 to use proper display mapping, calibration.
 * Restart servoes when server restarts (instead of just powering down)
 * Log server statuses, including errors

DONE 2015-03-01:
 * UI: One-click shooting -- should shoot once both servoes report INPOSITION
  - shoots on right button click once it is enabled
 * UI: Inactivity timer -- shows contigious time spent not moving


DONE 2015-02-24:
 * UI: Post-click motion
   - When you click, if you hold the mouse and shift it, it slightly tweaks
     gun positions
   - Esp. great with one-click shooting
 * UI: Make fire motor time adjustable (or at least longer)

DONE 2015-02-23
 * UI: report back status -- servo temperature
 * power-on turret with 'c' command
 * UI: move turret with arrow keys

DONE 2014-12-20
 * installed safety switch light and re-assembled mech

DONE 2014-10-09
 * sent off the mold v2 to be built at shapeways for upright casting

DONE 2014-10-07
 * Evaluated VytaFlex 20 casting
 *  * in-line force: 7 counts/lb
 *  * highest-sensitivity angle: 12 counts/lb

DONE 2014-10-05
 * started a casting with VytaFlex 20

DONE 2014-10-04
 * got legtool working on odroid
 * did a first pass at tuning gaits on the real robot
 * made servo communications more robust over tcp

DONE 2014-10-02
 * understood why my experiments at compensating for a gyro going over-rate
   were failing... the quaternion representation just cannot accurately
   represent large covariances, as after quaternion normalization, adjustments
   beyond 1.0 just peter out.  The only way to get more rapid convergence is
   to temporarily increase the attitude process noise, after which arbitrarily
   fast convergence can be had!

DONE 2014-09-29
 * got basic IMU plotting working, along with python unittest test cases for
   stationary performance of different sensors

DONE 2014-09-27
 * got legtool working with TCP servos

DONE 0214-09-21
 * first untethered walking!
 * made joystick input work with logitech joystick too

DONE 2014-09-20
 * finished all but molding on the next two boards

DONE 2014-09-18
 * populated two more boards
 * received vytaflex 20 for testing

DONE 2014-09-15
 * demolded vacuum formed foot... sensitivity up by 3x, but still not terribly
   good
 * sensor 2014-09-15 (vacuum molded, 6mm rubber)
 *  * in line force: 5 counts/lb
 *  * highest sensitivity angle: 15 counts/lb
 * sensor 2014-09-11 (non-vacuum molded, 7mm rubber)
 *  * in line force: 2 counts/lb
 *  * highest sensitivity angle: 5 counts/lb
 * ordered some vytaflex 20 and enough parts from digikey to populate the
   other 4 boards I have for testing

DONE 2014-09-14
 * mounted post on second board, prepared for vacuum casting

DONE 2014-09-13
 * populated second board

DONE 2014-09-11
 * demolded foot transducer and tested... good news: it measures pressure!
   bad news: not terribly well

DONE 2014-09-10
 * made rubber casting of first circuit board!

DONE 2014-09-09
 * photographed foot board with post and wires
 * epoxied post into foot board

DONE 2014-09-08
 * placed post on board with new thinner ecowire... 6 wires just barely fits
   through a #2 hole, but it did fit
 * verified that I can program the AVR and snugged everything down

DONE 2014-09-07
 * Made legtool work with newest trollius
 * Started work to let gait driver support multiple gait types in one execution

DONE 2014-09-06
 * updated gbulb to work with newer trollius
 * got attitude filter mostly working, and c++ port which is at least 20x
   faster than the python version
 * ordered thinner gloves

DONE 2014-09-04
 * Tried threading posts with new collet to anchor them, works for those with
   #2 hole size, #4 hole size doesn't leave enough material to be structural
 * Ordered the slightly more expensive wire with a tiny bit smaller diameter
   that is at least somewhat likely to be able to fit 6 wires in a #2 size
   hole
 * Continued working on getting a full attitude filter working, there is some
   problem on the high rotation rate cases, that doesn't seem to crop up with
   other acceleration is happening too

DONE 2014-09-02
 * C++ version speed compares well, 1d is much faster than real time on my
   desktop

DONE 2014-09-01
 * analyze what the process and measurement noises should be for gyros and
   accelerometers with noise model


DONE 2014-08-30
 * practiced threading posts, not very easy with just a vice
 * ordered a collet and more posts to get more practice
 * quoted a custom machined part at emachineshop, basically a $100 setup fee,
   after which parts are $3-5 each.  wouldn't make sense until the design was
   proven

DONE 2014-08-29
 * got barometer board working with wires in place instead of pins, had messed
   up a bunch of stuff when removing the pins

DONE 2014-08-28
 * released casting with screw, seems to have worked

DONE 2014-08-27
 * made test mold with screw embedded in foot

DONE 2014-08-24
 * finished updating firmware for attiny85
 * verified barometer functioning on board
 * ordered post with wider hole

DONE 2014-08-22
 * verified programmer connectivity with attiny85 on transducer board

DONE 2014-08-04
 * debug firmware to test foot transducer (w/o multiplexed serial bus) complete
 * ordered ecowire sample for foot transducer, and 6 pin connector/crimp pins
 * ordered 26 awg hookup wire for general robot use

DONE 2014-07-25
 * specified wire for foot transducer leads, had to find something thin enough
   to fit through the center of the post

DONE 2014-07-23
 * ordered foot mold from shapeways

DONE 2014-07-21
 * ordered mechanical parts for foot transducer
 *  * die + handle
 *  * spacer
 *  * nuts
 * ordered urethane rubber, sealant, and release agent
 *  * smooth on vytaflex 60
 * ordered misc supplies
 *  * cutting oil
 *  * steel epoxy

DONE 2014-07-20
 * selected barometer - mpl115a2
 * designed pressure board
 * sent off to oshpark
 * made digikey order
 *  * barometer
 *  * attiny85
 *  * passives

DONE 2014-07-19
 * connect up gait control through vclient and vserver
 * write non-pygame joystick routines, so that it doesn't spew to stdout all
   the time

DONE 2014-07-13
 * posted legtool video and announced
 * received SSOP adapters from SFE

DONE 2014-07-06
 * Split out legtool into separate repo, included in mech via "git subtree"

DONE 2014-07-02
 * gazebo servo names are no longer hard coded
 * pulled turret specific things out of gait_driver.py

DONE 2014-07-01
 * refactored all of mtool, now "legtool" into somewhat coherent python modules
 * checked in code to make vserver use the actual mech interface

DONE 2014-06-27
 * updated ripple_gait to allow command changes at any time

DONE 2014-06-26
 * got very basic standalone driving application working

DONE 2014-06-11
 * fixed: when stopping playback, the idle pose is not reliably commanded.
   possibly due to the same cause, dragging the mouse around the commander
   with body coordinates does not result in smooth motion
 * after adding better logging to temperature loop, identified that it was an
   assertion failure somewhere, but it hasn't happened again to show which one

DONE 2014-06-10
 * pushed to github and gitlab pygazebo and mtool versions which at least
   mostly work running on trollius, there are still a few outstanding bugs in
   mtool though

DONE 2014-06-06
 * continued work on moving pygazebo and herkulex.py to asyncio.  Have
   pygazebo all converted, but need to fill in some test coverage and verify
   it works actually commanding things

DONE 2014-06-02
 * got amble gaits (and other random leg groupings) working... they work much
   better without trying to be statically stable, which isn't possible on a
   quad anyways

DONE 2014-06-01
 * need to be able to set max and min on a per-servo basis, without having to
   worry about accidentally putting it into an infeasible configuration
 * changing leg number alone in IK tab didn't result in tester pointing at new
   leg
 * display servo temperature and voltage in status bar
 * implement changing leg order

DONE 2014-05-31
 * constructed prototype turret plate
 * re-assembled chassis with spacers on top

DONE 2014-05-28
 * Calibrated the legs so that they all touch the ground
 * render legs which aren't feasible in red in the gait tab
 * made static stable constants be proportional to cycle time

DONE 2014-05-26
 * implemented first pass at statically stable gait

DONE 2014-05-25
 * Ordered hardware to try a new mounting scheme for the turret, plus hook up
   wire and connectors to wire up the motor driver board
 * fixed sluggish playback when updating gait command widget

DONE 2014-05-24
 * Re-assembled with spacers on bottom, power dist board, motor driver, and
   battery mounting plate installed
 * Crimped on 0.1'' connectors to each of the servos cables
 * Assigned addresses to all servos
 * first walking!

DONE 2014-05-23
 * test assembly of legs with polycarb chassis

DONE 2014-05-18
 * gait tab can drive actual servos
 * added aliases to get the pan and tilt turret to work in mtool
 * made gait tab geometry view have square aspect ratio
 * made mtool resizing work better
 * it would be nice if the body commands could be set without waiting for a
   gait transition even if nothing else could be

DONE 2014-05-17
 * Finished cutting prototype polycarb chassis plates

DONE 2014-05-09
 * continued work towards letting the gait tab drive actual servos... mostly
   threading configurations through and cleaning things up
 * fixed some residual broken-ness in the servo and ik tabs from re-factoring
 * fixed link between leg config and the ik tester in the ik tab

DONE 2014-05-07
 * Added tests for symmetric gaits and fixed a couple of bugs to get them
   closer to being symmetric
 * stop playback when switching away from the gait tab
 * generate the actions list on construction, since commands can now not
   change it
 * rendered the support polygon

DONE 2014-05-05
 * Fixed up the rendering of allowable gaits to be a little more responsive
   and not be obviously incorrect.
 * Added axes and grid to the geometry view, to verify that yes, the gaits
   aren't coming out quite right

DONE 2014-04-29
 * implemented adjusting cycle time and downscaling the command to stay in the
   achievable regime
 * implemented the NotSupported exception for configurations that are not
   possible
 * rendered the current options in the UI
 * render achievable commands in command widget

DONE 2014-04-28
 * redefine IK coordinate system so that it is the same for all legs as viewed
   from each shoulder
 * actually implement remainder of gait functionality... changing cycle time
   and swing timing with speed

DONE 2014-04-27
 * Started work to verify that a given command is feasible

DONE 2014-04-26
 * Fixed some bugs and started writing a more comprehensive set of tests for
   gait generation
 * Implemented command widget for static gaits
 * Rendered axes in command widget, and used new code to render axes in IK
   tester in a slightly cleaner way

DONE 2014-04-24
 * Implemented steady state in mtool
 * Fixed gait to combine translation and rotation in the way you would expect
 * made slider cover two full phases
 * removed end controls from playback
 * implemented playback modes

DONE 2014-04-23
 * Hooked up spin based commands and let geometry viewer look in any reference
   frame or projection

DONE 2014-04-22
 * Tried to make a basic implementation of ripple_gait, for zero commands
   looking from the top it looks like it is working!

DONE 2014-04-20
 * Implemented rendering the body, shoulder, and leg positions with no
   niceties (fixed scale, projection, and coordinate frame)
 * Started work on the basic gait generation

DONE 2014-04-14
 * Implemented python "tf" library, to be used in gait tab.

DONE 2014-04-13
 * Continued very slow progress on gait tab of mtool, rendered gait graph.

DONE 2014-04-09

 * Started prototyping rough draft of python gait generator... really just
   what the APIs should look like, no real functionality has been written yet

DONE 2014-04-08

 * Started prototyping interface in designer for the gait tool, I think I have
   all or most of the interface elements I want in there, but I'm not yet sure
   how feasible it will be to implement

DONE 2014-04-06

 * Read the last 5 years of posts on the Trossen Robotics forum, trying to
   figure out what the state of the art in gait generation was.  Yikes, it
   looks like NUKE is largely it.  A number of other people have done one-off
   custom open loop controls, and stag is still the only one I could find
   doing anything closed-loop-ish with a dynamic gait.  It doesn't look like
   anyone actually knows how to measure attitude in a robust way using an
   accel/gyro.

 * mtool
 *  * mtool needs to support multiple configuration files
 *  * mtool needs to document what "idle" is

DONE 2014-04-05
 * Updated gazebo with current 3D models
 * Ordered full complement of servos

DONE 2014-04-03
 * Added more missing items to servo order spreadsheet
 * Figured out how to re-link a sketch to a new face in freecad
 * Removed antenna from chassis model

 * Started making gazebo visual models from freecad models... mostly just
   re-learning blender

DONE 2014-04-02
 * Built servo order spreadsheet to keep track of all the parts we would need
 *  * https://docs.google.com/spreadsheets/d/17kCEHZO_xlTlWSWM5mOakoSijZrfuTzqZxxZrZQiLXs/edit#gid=0
 * added holes for servo cables to enter through bottom

DONE 2014-04-01
 * Added mounting tabs to all servos
 * add mounting holes for each of the boards
 * add supporting standoffs between the two chassis plates
 * add plate to velcro battery to
 * figure out where the center of mass is going to be, try to get it as close
   to centered as possible (will allow dynamic gaits)
 * make more decorative cutouts on the top plate

DONE 2014-03-30
 * Designed rough draft of chassis plates
 * Created center of mass spreadsheet, flipped turret around to get it close to centered
 *  * https://docs.google.com/spreadsheets/d/17kCEHZO_xlTlWSWM5mOakoSijZrfuTzqZxxZrZQiLXs/edit#gid=0

DONE 2014-03-29
 * Built power cable for odroid
 * packaged up keyed male 0.1'' headers

DONE 2014-03-28
 * Moved turret to office

DONE 2014-03-27
 * Recorded some demo videos of the turret

DONE 2014-03-26
 * rotated reference frame
 * decimated accelerometer input to get CPU usage down to 90% on my machine

 * muzzle velocity measured by hitting an aluminum plate and recording with
   audacity... appears to be around 80ft/s with the 0.2g BBs I have

 * considering demo application complete

DONE 2014-03-25

 * Implemented ukf_filter from the book with inspiration from the pykalman
   API, seems much more stable, in that it works as I expect instead of
   exploding randomly

 * Found another bug that was causing IMU readings to stop and fixed it

DONE 2014-03-24

 * Fixed the worst of the UKF problems, but pykalman seems to be not very
   numerically robust in general... will probably write one from the book in
   the end

 * Got the servos to be stable by turning down the D term of their internal PID

 * Made USB not block on transmit

DONE 2014-03-23

 * Integrated gyros into attitude with a 1s bias sampling period at the start,
   works OK, but drift is too large after a minute or so of operation, will
   need ongoing corrections or longer bias sampling period

 * Switched joystick to be accumulative with deadband, and made the d-pad
   adjust in the smallest steps the servo can represent

 * Started work on KF for attitude... having problems that I haven't
   successfully debugged yet

DONE 2014-03-22

 * Traced AVR watchdogs to USB slowness, looks like current USB implementation
   can block for >15ms at a time.  With watchdog set much larger, everything
   works fine.  Will re-work usb_serial.c to not block.

DONE 2014-03-21
 * Wired up servos to AVR and battery through power distribution board
 * Updated AVR to get basic serial communication working

 * Something appears to be resetting the AVR firmware occasionally when
   communicating serially with the servos, need to debug

DONE 2014-03-20

 * Worked towards having AVR communicate serially to servos instead of using
   donbgu RS232 adapter

DONE 2014-03-19
 * Constructed prototype power distribution board

DONE 2014-03-18
 * assembled complete turret

DONE 2014-03-16
 * Fixed muzzle velocity issue (gearbox wasn't mating to barrel properly)
 * Ordered parts for perfboard power distribution, including Castle BEC

 * Partially re-assembled turret, awaiting additional M2 screw sizes before
   completing

 * Wired up MiniIMU v2 to AVR and prepared for mounting in turret

DONE 2014-03-15
 * Ordered M2x10 and M2x6 screws for AEG and chassis assembly
 * Made video of operation
 * Discovered barrel velocity is terrible
 * Started drafting chassis layout

DONE 2014-03-14

 * Wrote simple application to control turret, laser, agitator, and AEG from
   joystick

 * Tested at 10ft with the 3'' target... it is plenty feasible to center the
   laser pointer on the target at that distance using nothing but the 1080p
   video feed.  I haven't tested to see how much recoil is caused by the AEG
   mechanism yet (too loud to test much while Cyrus is sleeping)

DONE 2014-03-13
 * installed camera using aluminum jaws
 * wired up laser all the way to AVR on breadboard, tested control in firmware
 * installed EC3 connectors on battery, charger, and motor driver
 * odroid + C920 work fine

DONE 2014-03-12

 * Assembled AEG turret minus camera, tested servo drivers... seems there is
   plenty of power for this mass AEG

DONE 2014-03-11

 * mounted prototype turret base to 2x4 and polycarb for testing (still
   waiting on hardware to assemble full prototype)

DONE 2014-03-10
 * source up on gitlab.com

DONE 2014-03-09
 * sent off plates to emachineshop

 * ordered smaller battery, 30mm spacers, charger, and some screws from
   hobbyking

 * came up with draft approach for mounting turret without chassis
 * some polycarbonate I have left over + some 2x4s plus a hand drill
 * ordered from amazon
 * spacers for around the AEG
 * M2 plastic washers

DONE 2014-03-06
 * Iterate on AEG mounting plates
 * move plates to be 30mm apart
 * make sure there is a nice place for the scoring LED board on top if needed
 * verify final mounting clearance with paper version

DONE 2014-03-05
 * fix camera geometry, both top and bottom surfaces are sloped somewhat

 * make sure all drill holes are large enough to account for +- .25mm
   tolerance of emachineshop

 * get servo holes to be fixed distance away from plate
 * switch plates to aluminum thickness
 * make corners rounded
 * put holes for spacer supports
 * determine if there is room for M2 washers between plate and servo bracket
 * look to reduce mass maybe reduce shroud around barrel
 * see if anything looks nice which shrouds the agitator motor
 * ensure adequate mounting location for IMU
 * re-draw camera jaw, include spacer support holes

DONE 2014-03-04
 * Re-measure where AEG mounting holes are
 * ensure that AEG mounting holes line up


DONE 2014-03-02
 * First rough draft of turret freecad model

DONE 2014-03-01
 * Fired AEG from lipo with motor driver

DONE 2014-02-20
 * Integrated eventlet with QT in a hacky way
 * Started building simple GUI to drive servos and show IK

DONE 2014-02-18
 * Characterized DRS-0101 servo
 * Assembled mock leg with brackets
 * Ordered rubber bumper cushion for leg tip from McMcaster

DONE 2014-02-16
 * Test fired AEG from lab supply
   * Needed 4.5A before it would run... worked just fine at 5V, higher
     input voltage would probably need PWM
   * Ordered pololu motor driver

DONE 2014-02-15
 * Simulate herkuleX servo physical characteristics
 * Get physics to be more realistic
   * the contact point on the mech's legs may be better represented as
     a sphere?
   * Figure out what the moments of inertia should likely be for what
     we're talking about
 * Ordered test battery
 * Wrote up work plan

DONE 2014-02-14
 * Get NUKE and pypose to operate the thing with oracular commands
   * add subscription support
   * make pypose gazebo driver read other commands and report those as
     current pose

DONE 2014-02-02
 * Switch gazebo_client to using eventlet Event instead of sleeps for
   cross-coroutine synchronization

DONE 2014-02-01
 * Most of the physics problem was that rotational inertia needs to be
   separate specified, as it defaults to something large and independent
   of the mass you chose.
