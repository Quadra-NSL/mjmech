# Copyright 2014-2015 Josh Pieper, jjp@pobox.com.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import sys

Import('canonenv')
Import('libbase')
Import('ModuleMain')

env = canonenv.Clone()

env.Append(CPPPATH=['.'])

def SetupCustomGStreamer(gsenv):
    # We do not want to use stock gstreamer -- it has hard-to-catch bugs like
    # streams stopping after few minutes of operation. We require a custom-built
    # one from 'mj-gstreamer-build' project.
    gstreamer_root = '/opt/gstreamer-1.4.5'
    gs_min_revision = 1
    try:
        gs_rev = open(gstreamer_root + '/mj-gstreamer-revision',
                      'r').read().strip()
    except IOError:
        print >>sys.stderr, (
            'ERROR: custom-compiled gstreamer not found. try '
            'install_packages.sh')
        sys.exit(1)

    if int(gs_rev) < gs_min_revision:
        print >>sys.stderr, \
            'ERROR: custom-compiled gstreamer has wrong revision'
        print >>sys.stderr, \
            'try removing %s, then re-run install_packages.sh' \
            % gstreamer_root
        sys.exit(1)

    gsenv['GS_LIB'] = gstreamer_root + '/lib'
    gsenv.Append(RPATH = ['$GS_LIB'])

    for lib in [
            'gstreamer-rtsp-server-1.0', 'gstreamer-rtsp-1.0',
            'gstreamer-sdp-1.0',
            'gstreamer-1.0', 'gstreamer-base-1.0', 'gstreamer-app-1.0',
            'glib-2.0', 'gobject-2.0']:
        gsenv.ParseConfig('PKG_CONFIG_PATH=$GS_LIB/pkgconfig pkg-config '
                          '--cflags --libs ' + lib)

def SetupGStreamer(gsenv):
    for lib in [
            'gstreamer-rtsp-server-1.0', 'gstreamer-rtsp-1.0',
            'gstreamer-sdp-1.0',
            'gstreamer-1.0', 'gstreamer-base-1.0', 'gstreamer-app-1.0',
            'glib-2.0', 'gobject-2.0']:
        gsenv.ParseConfig('pkg-config '
                          '--cflags --libs ' + lib)

        
crenv = env.Clone()
crenv.Append(LIBS=['boost_coroutine',
                   'boost_context',
                   ])

gsenv = env.Clone()
if gsenv['UBUNTU_RELEASE'] == 'xenial':
    SetupGStreamer(gsenv)
else:
    SetupCustomGStreamer(gsenv)
Export('gsenv')

SOURCES = [
    'ahrs.cc',
    'gait_driver.cc',
    'herkulex.cc',
    'mech_warfare.cc',
    'mjmech_imu_driver.cc',
    'servo_monitor.cc',
    'turret.cc',
    ]

GST_SOURCES = [
    'camera_driver.cc',
    'gst_helpers.cc',
    'gst_main_loop.cc',
    'rtsp_server.cc',
    'target_tracker.cc',
    'video_display.cc',
    'mcast_video_link.cc',
]

GST_OBJECTS = [gsenv.SharedObject(name)
               for name in GST_SOURCES]

libmech = gsenv.StaticLibrary('mech', SOURCES + GST_OBJECTS)
libmech_so = gsenv.SharedLibrary('mech', SOURCES + GST_OBJECTS)

Export('libmech')
Export('libmech_so')

herkulex_tool = crenv.Program('herkulex_tool',
                              ['herkulex_tool.cc'] + libmech + libbase)

TESTS = ['test/' + x for x in [
        'herkulex_test.cc',
        'leg_ik_test.cc',
        'test_main.cc',
        'ripple_test.cc',
        ]]

testenv = crenv.Clone()
testenv.Append(LIBS=['boost_unit_test_framework'])

test_mech = testenv.Program('test_mech', TESTS + libmech + libbase)
testenv.Command('test_mech.passed', test_mech,
                '$SOURCE && touch $TARGET')

for env in (crenv, gsenv):
    env['MODULE_MAIN_LIBS'] = libmech + libbase
    env['MODULE_MAIN_NSPREFIX'] = 'mech::'

command_env = gsenv.Clone()
command_env['MODULE_MAIN_LIBS'] = [
    command_env.Object('mech_warfare_command.cc')
] + command_env['MODULE_MAIN_LIBS']
ModuleMain(command_env, 'mw_command', 'MWCommand')

ModuleMain(crenv, 'mjmech_imu_driver', 'MjmechImuDriver')
ModuleMain(gsenv, 'mech_warfare', 'MechWarfare')
ModuleMain(crenv, 'servo_monitor_app', 'ServoMonitorApp')
ModuleMain(crenv, 'ahrs_app', 'AhrsApp')

sender = ModuleMain(gsenv, 'video_sender_app', 'VideoSenderApp')
gsenv.Command(
    'video_sender_test.passed', sender,
    '$SOURCE -t camera_driver.stats --max_stats=2 --require_stats_good=1 '
    '--video_link_enable=0 '
    '--remote_debug.port=0 --camera.device=TEST --rtsp.port=0 && touch $TARGET')

controller = ModuleMain(gsenv, 'video_controller_app', 'VideoControllerApp')
gsenv.Command(
    'video_controller_test.passed', controller,
    '$SOURCE -t video_display.stats --max_stats=2 --require_stats_good=1 '
    '--video_link_enable=0 '
    '--remote_debug.port=0 --display.source=TEST --display.hide_video=1 '
    ' && touch $TARGET')

# Loopback test combines sender and receiver in a same app, and uses video link
# to transfer frames from one to another.
loopback = ModuleMain(gsenv, 'video_loopback_app', 'VideoLoopbackApp')
gsenv.Command(
    'video_loopback_test.passed', loopback,
    '$SOURCE -t video_display.stats --max_stats=2 --require_stats_good=1 '
    '--camera.device=TEST --display.write_video=/tmp/mjmech-video-test.mp4 '
    '--remote_debug.port=0 --display.hide_video=1 '
    ' && touch $TARGET')
